package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cqnu.sunxt.telephonebook.bean.UploadContactBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_CONTACT_BEAN".
*/
public class UploadContactBeanDao extends AbstractDao<UploadContactBean, Long> {

    public static final String TABLENAME = "UPLOAD_CONTACT_BEAN";

    /**
     * Properties of entity UploadContactBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "UploadContactBean");
        public final static Property PhoneNumber = new Property(2, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property AvatarUrl = new Property(3, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property Pinyin = new Property(4, String.class, "pinyin", false, "PINYIN");
        public final static Property FirstLetter = new Property(5, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property IsContainsEmoji = new Property(6, boolean.class, "isContainsEmoji", false, "IS_CONTAINS_EMOJI");
        public final static Property IsSelected = new Property(7, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property Weixin = new Property(8, String.class, "weixin", false, "WEIXIN");
        public final static Property Mail = new Property(9, String.class, "mail", false, "MAIL");
    }


    public UploadContactBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UploadContactBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_CONTACT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UploadContactBean\" TEXT," + // 1: name
                "\"PHONE_NUMBER\" TEXT," + // 2: phoneNumber
                "\"AVATAR_URL\" TEXT," + // 3: avatarUrl
                "\"PINYIN\" TEXT," + // 4: pinyin
                "\"FIRST_LETTER\" TEXT," + // 5: firstLetter
                "\"IS_CONTAINS_EMOJI\" INTEGER NOT NULL ," + // 6: isContainsEmoji
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 7: isSelected
                "\"WEIXIN\" TEXT," + // 8: weixin
                "\"MAIL\" TEXT);"); // 9: mail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_CONTACT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadContactBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(4, avatarUrl);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(6, firstLetter);
        }
        stmt.bindLong(7, entity.getIsContainsEmoji() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
 
        String weixin = entity.getWeixin();
        if (weixin != null) {
            stmt.bindString(9, weixin);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(10, mail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadContactBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(3, phoneNumber);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(4, avatarUrl);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(6, firstLetter);
        }
        stmt.bindLong(7, entity.getIsContainsEmoji() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
 
        String weixin = entity.getWeixin();
        if (weixin != null) {
            stmt.bindString(9, weixin);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(10, mail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadContactBean readEntity(Cursor cursor, int offset) {
        UploadContactBean entity = new UploadContactBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatarUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstLetter
            cursor.getShort(offset + 6) != 0, // isContainsEmoji
            cursor.getShort(offset + 7) != 0, // isSelected
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weixin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // mail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadContactBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatarUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstLetter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsContainsEmoji(cursor.getShort(offset + 6) != 0);
        entity.setIsSelected(cursor.getShort(offset + 7) != 0);
        entity.setWeixin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadContactBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadContactBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadContactBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
